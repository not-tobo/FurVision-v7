@use 'backend' as *;

#{c(main visualRefresh)} {
  // CHANNELS BACKGROUND
  #{c(sidebar list)} {
    margin-bottom: var(--custom-app-panels-height);
    border-top-left-radius: 10px;
    border: none;
  }
  #{c(sidebar server container)} {
    background: hsl(from cv('shading.bg') h s l/calc(cv('shading.percent') * 0.25));
    padding: 0;
  }



  // HEADER - COMMUNITY/BANNER

  #{c(sidebar server header bannerContainer)} {
    background-color: transparent;
    border: none;
  }

  // UNREAD PILL
  #{c(sidebar server channel unreadPill)} {
    box-shadow: 0 0 6px 1px cv('color.main');
  }

  // UNREAD BAR
  #{c(sidebar server unreadBar bottom)},
  #{c(sidebar server unreadBar old bottom)}  {
    bottom: 8px;
  }
  #{c(sidebar server unreadBar bar)},
  #{c(sidebar server unreadBar old bar)} {
    background-color: cv('color.main');
    border-color: cv('color.main');
  }
  #{c(sidebar server unreadBar unreadIcon)},
  #{c(sidebar server unreadBar text)} {
    color: var(--button-filled-brand-text) !important; //inline style
  }
}

// THREAD SPINE
#{c(sidebar server channel threadsSpineBorder)} {
  background-color: cv('color.main');
}
#{c(sidebar server channel threadsSpine)} {
  color: cv('color.main');
}

// CHANNEL
// hidden vars
:root {
  --channel-default: var(--channels-default);
  --channel-muted: var(--interactive-muted);
  --channel-hover: var(--interactive-hover);
  --channel-selected: var(--interactive-active);
  --channel-selected-bg: var(--hsl-main-color);
  --channel-unread: var(--hsl-main-color);
  --channel-unread-hover: var(--hsl-hover-color);
}

#{c(sidebar server channel link)} {
  transition: all 0.15s ease-in-out;
  margin-left: 4px;
  &::before {
    top: 0;
    right: 100%;
    bottom: 0;
    left: 0;
    transition: all 0.15s ease-in-out;
    z-index: -1;
    border-radius: 4px;
  }
}
#{c(sidebar server channel icon)} {
  width: 18px;
  height: 18px;
  margin-right: 3px;
  transition: all 0.15s ease-in-out;
  color: var(--channel-default);
}
#{c(sidebar server channel name)} {
  transition: all 0.15s ease-in-out;
  color: var(--channel-default);
}
#{c(sidebar server channel wrapper)} {
  // MUTED
  &#{c(sidebar server channel muted)} {
    #{c(sidebar server channel name)},
    #{c(sidebar server channel icon)} {
      color: var(--channel-muted);
    }
  }

  // HOVER
  &:hover,
  &#{c(sidebar server channel muted)}:hover {
    #{c(sidebar server channel link)} {
      background: cv('shading.hover');
    }
    #{c(sidebar server channel name)},
    #{c(sidebar server channel icon)} {
      color: var(--channel-hover);
    }
  }

  // UNREAD
  &#{c(sidebar server channel unread)} {
    #{c(sidebar server channel name)} {
      color: var(--channel-unread);
      text-shadow: 0 0 3px;
    }
    #{c(sidebar server channel icon)} {
      color: var(--channel-unread);
      filter: drop-shadow(0 0 3px);
    }
    &:hover {
      :is(#{c(sidebar server channel name)}, #{c(sidebar server channel icon)}) {
        color: var(--channel-unread-hover);
      }
    }
  }

  // SELECTED
  &#{c(sidebar server channel selected)} {
    #{c(sidebar server channel link)} {
      background-color: transparent;
      &::before {
        right: 0;
        background: var(--channel-selected-bg);
        animation: cv-channel-select 0.3s ease-in-out;
      }
    }
    #{c(sidebar server channel name)},
    #{c(sidebar server channel icon)} {
      color: var(--channel-selected);
    }
  }

  // CONNECTED
  &#{c(sidebar server channel connected)} {
    #{c(sidebar server channel name)} {
      color: cv('color.main');
      text-shadow: 0 0 3px;
    }
    #{c(sidebar server channel icon)} {
      color: cv('color.main');
      filter: drop-shadow(0 0 3px);
    }
  }
}

// VC USER LIMIT
#{c(main visualRefresh)} {
  #{c(sidebar server channel voiceLimitWrapper)},
  #{c(sidebar server channel voiceLimitUsers)} {
    background: transparent;
  }
  #{c(sidebar server channel voiceLimitUsers)} {
    padding: 0 8px 0 6px;
  }
  #{c(sidebar server channel voiceLimitTotal)} {
    padding: 0 6px 0 1px;
  }
}
